{
  "openapi": "3.0.0",
  "info": {
    "title": "Donus Code Challenge",
    "description": "Documentation for the Donus Code Challenge API REST.",
    "version": "1.0.0",
    "contact": {
      "name": "Jo√£o Victor de Souza",
      "email": "jvpoletti@gmail.com",
      "url": "https://www.linkedin.com/in/jvpoletti/"
    }
  },
  "tags": [
    {
      "name": "Users",
      "description": "Managing users"
    },
    {
      "name": "Accounts",
      "description": "Managing accounts"
    },
    {
      "name": "Transactions",
      "description": "Managing transactions"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user.",
        "description": "Create a new user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cpf": {
                    "type": "string"
                  },
                  "full_name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating user.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CPFInUse"
                    },
                    {
                      "$ref": "#/components/schemas/NoCPF"
                    },
                    {
                      "$ref": "#/components/schemas/NoFullName"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/{cpf}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve user info.",
        "description": "Returns all the information from a user.",
        "parameters": [
          {
            "in": "path",
            "name": "cpf",
            "description": "The user's CPF.",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid CPF parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user.",
        "description": "Deletes a user based on the CPF.",
        "parameters": [
          {
            "in": "path",
            "name": "cpf",
            "description": "A user's CPF",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to delete user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFound"
                }
              }
            }
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create an account.",
        "description": "Create a new account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_cpf": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating the account.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UserHasAccount"
                    },
                    {
                      "$ref": "#/components/schemas/UserNotFound"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Retrieve account info.",
        "description": "Returns all the information from an account.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The accounts's ID or user's CPF.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete an account.",
        "description": "Deletes an account based on the ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The accounts's ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Account successfully deleted."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to delete account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNotFound"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create a transaction.",
        "description": "Create a new transaction. A DEPOSIT transaction requires only the recipient account's ID. A TRANSFER transaction requires the recipient account's ID as well as the sender account's ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number"
                  },
                  "recipient_id": {
                    "type": "string"
                  },
                  "sender_id": {
                    "type": "string",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Error while creating the transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid amount value. | Recipient account not found. | Sender account not found. | Not enough funds. | Exceeded the maximum deposit amount."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Error while creating the transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unable to create transaction."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "DEPOSIT",
              "TRANSFER"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "recipient_id": {
            "type": "string"
          },
          "sender_id": {
            "type": "string"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "balance": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "user_cpf": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "cpf": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CPFInUse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User already exists."
          }
        }
      },
      "UserNotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User not found."
          }
        }
      },
      "NoCPF": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "'Provide a valid CPF."
          }
        }
      },
      "NoFullName": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Provide the user's full name."
          }
        }
      },
      "UserHasAccount": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User already has an account."
          }
        }
      },
      "AccountNotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Account not found."
          }
        }
      }
    }
  }
}